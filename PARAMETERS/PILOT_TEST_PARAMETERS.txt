/this is file PILOT_TEST_PARAMETERS.txt !
/
DEBUG_MODE,TRUE,
/
/
/ if TRUE (or anything but false)
/ Tetris will be in adaptive mode
/    (rows will be removed when it gets too high, so you can't lost)
/ if set to FALSE it will be in classic mode
/
ADAPTIVE_TETRIS,TRUE,
/
NUMBER_OF_COLUMNS,10,
/
NUMBER_OF_ROWS,38,
/
/
/
/ tetris pieces are made up of 4 blocks
/ therefore one piece is equal to a score of -4 points
/
POINTS_SUBTRACTED_PER_NEW_BLOCK,1,
/
/
/ if a row is full it is removed
/ therefore one full row is 10 blocks
/ one full row is equal to a score of 10 x 10 = +100 points
/
POINTS_ADDED_PER_REMOVED_BLOCK_FROM_FULL_ROW,10,
/
/
/ remove the biggest partial row if any blocks
/ appear in row 7 from the top
/
REMOVE_BIGGEST_PARTIAL_ROW_IF_BLOCK_IS_IN_ROW,7,
/
/
/ each space removed from a partial row counts as -3 points
/
POINTS_SUBTRACTED_PER_REMOVED_BLOCK_FROM_PARTIAL_ROW,3,
/
/
/ the delay between moves is computed each frame as being:
/
/        DELAY = 1000 Milliseconds - Score
/
/        if DELAY < MINIMUM_DELAY_MILLISECONDS then DELAY = MINIMUM_DELAY_MILLISECONDS
/
MINIMUM_DELAY_MILLISECONDS,75,
/
/MINIMUM_DELAY_MILLISECONDS,1,
/
/
/
// Uncomment this to make the zoid-fall-speed a function of the player's keypress activity of the preceding time window
ADAPTIVE_FALL_SPEED_LINEAR,
/
/ Uncomment this to make the zoid-fall-speed adjusted slowly based on whether or not the player presses keys more or less often than they did in the preceding time window
/ADAPTIVE_FALL_SPEED_BOUNDS,25,75, 
/
/
/
TIME_LIMIT_IN_SECONDS,600,
/
/
/
/
/
MAXIMUM_LEVEL,20,
/
/SECONDS_IN_MAXIMUM_LEVEL_TO_SWITCH_TO_FOCUS_TASK,60,
/
/ stop condition based on database of previous times spent in each level
/
TIME_IN_LEVEL,
/
/
/
/ stop_condition,value,comparison
/ "when the size of the last row removed is greater than 1, switch tasks"
/
/SPEED_LEVEL,10,>,
/
/   alternative measures:
/  	SPEED_LEVEL, HEIGHT_VARIANCE, DROP_DURATION_VARIANCE, DROP_PERCENTAGE
/
/
/
RUN_UNTIL_TIME_LIMIT,3600,
/
/
/ time window, in ms, over which to average the percentage of time spent with the drop key down
/
DROP_PERCENTAGE_TIME_WINDOW,10000,
/
/
/ Length of queue used for height variance and drop duration variance
/  basically, over how many previous events should we calculate the variance?
/
QUEUE_HISTORY_LENGTH,10,
/
/
/
STOP,
//